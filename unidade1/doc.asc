== Projetos e Tarefas da Primeira Unidade

=== Tarefa 1

[qanda]
Descreva a distribuição de células fotorreceptoras na retina e seu impacto na percepção visual::
Possuimos dois tipos de células fotorreceptoras, são elas os _cones_ e os _bastonetes_.
Resumidamente os _cones_ são responsaveis pela percepção das cores e os _bastonetes_ pela intensidade luminosa,
os cones predominantemente se localizam em um ponto na retina, chamado de fovea, já os bastonetes
ficam distribuidos na periferia dessa região, essa distribuição faz com que os seres humanos possuam um
ponto focal no centro do seu campo de visão, essa região central é a que possui maior nitidez, e devido a distribuição
dos bastonetes, e sua sensibilidade a luminosidade, eles são responsaveis pela visão noturna e nossa visão periférica.


Qual a diferença entre os cones S, M e L? Quais deles são mais ativados quando uma luz amarela é projetada na retina?::
A imagem a seguir resume bem o papel de cada tipo de cone na nossa perceção de cor, o tipo S é responsavel pela
perceção da faixa mais proxima ao azul, M reage principalmente as frequencias proximas do verde e o L ao vermelho.
A luz amarela possui comprimento de onda entre 565 e 590 nm, portando podemos observar pelo gráfico que é uma combinação,
entre a reação do cone M com o cone L, provoca a reação que nos faz perceber a cor amarela.


[.float-group]
image::unidade1/Cones_SMJ2_E.svg[title="Simplified human cone response curves", 300,200, link="https://commons.wikimedia.org/w/index.php?curid=10514373"]

//By <a href="https://en.wikipedia.org/wiki/User:Vanessaezekowitz" class="extiw" title="en:User:Vanessaezekowitz">Vanessaezekowitz</a> at <a class="external text" href="https://en.wikipedia.org">en.wikipedia</a>, <a href="https://creativecommons.org/licenses/by-sa/3.0" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=10514373">Link</a>

'''

* Escreva um programa para
** abrir uma imagem e exibir na tela os 3 canais separadamente

Compilando e Executando.
....
$ make q3a
$ ./q3a <caminho_para_a_imagem>
....

Exemplo de funcionamento
[.float-group]
--
[.left.text-center]
image::unidade1/entrada_q3a.png[title="Entrada do programa", 300,200]

[.left.text-center]
image::unidade1/canal_R.png[title="Apenas o Canal R", 300,200 ]
[.left.text-center]
image::unidade1/canal_G.png[title="Apenas o Canal G", 300, 200]
[.left.text-center]
image::unidade1/canal_B.png[title="Apenas o Canal B", 300, 200]
--
Download do código completo: link:unidade1/q3a.cpp[q3a.cpp]

+++ <details><summary> +++
#*_Clique aqui pra ver o código completo_*#
+++ </summary><div> +++
[source, cpp]
----
include::q3a.cpp[]
----
+++ </div></details> +++


** abrir uma imagem e exibir na tela a imagem invertida horizontalmente

Compilando e Executando.
....
$ make q3b
$ ./q3b <caminho_para_a_imagem>
....

Exemplo de funcionamento
[.float-group]
--
[.left.text-center]
image::unidade1/entrada_q3b.png[title="Entrada do programa", 300,200]

[.left.text-center]
image::unidade1/flipHorizontal.png[title="Imagem invertida horizontalmente", 300,200 ]
--
Download do código completo: link:unidade1/q3b.cpp[q3b.cpp]

+++ <details><summary> +++
#*_Clique aqui pra ver o código completo_*#
+++ </summary><div> +++
[source, cpp]
----
include::q3b.cpp[]
----
+++ </div></details> +++


** abrir duas imagens (a e b) de mesmo tamanho e exibir na tela uma nova imagem (c) com o blending entre ambas, usando uma combinação linear entre elas

Compilando e Executando.
....
$ make q3c
$ ./q3c <caminho_para_a_imagem A> <caminho_para_a_imagem B>
....

Exemplo de funcionamento
[.float-group]

video::KDlCsc6b9kg[youtube, 640, 480, title="Demonstração Blending"]

Download do código completo: link:unidade1/q3c.cpp[q3c.cpp]

+++ <details><summary> +++
#*_Clique aqui pra ver o código completo_*#
+++ </summary><div> +++
[source, cpp]
----
include::q3c.cpp[]
----
+++ </div></details> +++


** salvar uma nova imagem com o seguinte gradiente vertical

Compilando e Executando.
....
$ make q3d
$ ./q3d  <caminho_para_a_imagem>
....

Exemplo de funcionamento
[.float-group]
--
[.left.text-center]
image::unidade1/entrada_q3d.png[title="Entrada do programa", 300,200]

[.left.text-center]
image::unidade1/gradiente.png[title="Gradiente utilizado na imagem", 300,200 ]

[.left.text-center]
image::unidade1/imagem_com_gradiente.png[title="Imagem de entrada x Gradiente", 300,200 ]
--
Download do código completo: link:unidade1/q3d.cpp[q3d.cpp]

+++ <details><summary> +++
#*_Clique aqui pra ver o código completo_*#
+++ </summary><div> +++
[source, cpp]
----
include::q3d.cpp[]
----
+++ </div></details> +++

'''

[qanda]
Considere o formato de imagem NetPBM::
Qual a diferença entre os números mágicos P1, P2, P3, P4, P5 e P6?:::

    P1: BitMap, extenção .pbm, valores: 0-1 (Preto e Branco),  ASCII

    P2: GrayMap, extenção .pgm, valores:0-255, ASCII

    P3: PixMap, extenção .ppm, valores: 3 canais(RGB) 0-255 cada canal, ASCII

    P4: BitMap, extenção .pbm, valores: 0-1 (Preto e Branco),  Binário

    P5: GrayMap, extenção .pgm, valores:0-255, Binário

    P6: PixMap, extenção .ppm, valores: 3 canais(RGB) 0-255 cada canal, Binário

Converta uma imagem jpg para PBM (ASCII) utilizando convert e display para exibir:::

....
$ convert -compress none cafe.jpg cafe_ascii.pbm
$ display  cafe_ascii.pbm
....

[.float-group]
--
[.left.text-center]
image::unidade1/cafe.jpg[title="Imagem Original", 300,200]

[.left.text-center]
image::unidade1/cafe_ascii.pbm[title="Imagem convertida para pbm", 300,200]
--
Imagem convertida: link:unidade1/cafe_ascii.pbm[cafe.pbm]

Converta a mesma imagem para PBM (binário) e para PPM (binário). Compare o tamanho dos 4 arquivos de imagem:::

|===
|Arquivo  | Tamanho
|cafe.jpg | 98.9Kb
|cafe_ascii.pbm | 600.5Kb
|cafe_binary.pbm| 37.5Kb
|cafe_ascii.ppm | 3.2Mb
|cafe_binary.ppm| 900Kb
|===

Por que o formato binário ocupa menos espaço que o formato ASCII?:::

Cada caracter ASCII ocupa 8 bits, já no binário cada bit representa um valor de pixel, no PBM
já no PPM, cada conjunto de 3 caracteres asciis represantam um pixel(RGB).

Por que o formato PPM binário ocupa mais espaço que o formato PBM binário?:::

O formato PPM é um PixMap já o PBM é um BitMap, ou seja, cada unidade do PPM é
é formado por um conjunto de 3 bytes, para representar as componentes RGB do pixel,
já no padrão PBM, cada unidade representa um unico valor, 0 ou 1, ou seja 1 bit por
unidade (pixel de 1 bit).

Quais desses formatos são vetoriais e quais são bitmaps? BMP, SVG, JPG, EPS, PNG::

Formatos bitmaps::: BPM, JPEG, PNG.

Formatos vetorais::: SVG, EPS.

Imagens de algumas aplicações possuem um nível de ruído considerável, principalmente aquelas que captam em níveis baixos de iluminação, como na captura de imagens astronômicas. Uma das formas de atenuar esse tipo de ruído é através da média de inúmeras imagens. Utilizando as 9 imagens disponibilizadas, crie um programa que gere uma nova imagem com o ruído atenuado.::
Compilando e Executando.
....
$ make q6
$ ./q6
....

Exemplo de funcionamento
[.float-group]
--
[.left.text-center]
image::unidade1/Media.png[title="Imagem Media, Imagem filtrada", 300,200 ]
--
Download do código completo: link:./unidade1/q6.cpp[q6.cpp]

Entrada utilizada: link:./unidade1/imagensComRuido.zip[imagensComRuido]

+++ <details><summary> +++
#*_Clique aqui pra ver o código completo_*#
+++ </summary><div> +++
[source, cpp]
----
include::q6.cpp[]
----
+++ </div></details> +++
